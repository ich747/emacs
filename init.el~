;; -*- Mode: Emacs-Lisp ; Coding : utf-8 -*-


;;<先史>-----------------------------------------------*

;; <ディレクトリ構成>
;; <\ディレクトリ構成>

;; <leaf install code>
(prog1 "prepare leaf"
  (prog1 "package"
    (custom-set-variables
     '(package-archives '(("org"   . "https://orgmode.org/elpa/")
                          ("melpa" . "https://melpa.org/packages/")
                          ("gnu"   . "https://elpa.gnu.org/packages/"))))
    (package-initialize))

  (prog1 "leaf"
    (unless (package-installed-p 'leaf)
      (unless (assoc 'leaf package-archive-contents)
        (package-refresh-contents))
      (condition-case err
          (package-install 'leaf)
        (error
         (package-refresh-contents)       ; renew local melpa cache if fail
         (package-install 'leaf))))

    (leaf leaf-keywords
      :ensure t
      :config (leaf-keywords-init)))

  (prog1 "optional packages for leaf-keywords"
    ;; optional packages if you want to use :hydra, :el-get,,,
    (leaf hydra :ensure t)
    (leaf el-get :ensure t
      :custom ((el-get-git-shallow-clone  . t)))))

;; <\leaf install code>

;;<\先史>----------------------------------------------*




;;<Pkg via leaf>---------------------------------------*

;;Packaging via leaf
;(leaf leaf-tree :ensure t)
;(leaf leaf-convert :ensure t)
;(leaf transient-dwim
;  :ensure t
;  :bind (("M-=" . transient-dwim-dispatch)))

(leaf paren
  :doc "highlight matching paren"
  :tag "builtin"
  :custom ((show-paren-delay . 0.1))
  :global-minor-mode show-paren-mode)

(leaf simple
  :doc "basic editing commands for Emacs"
  :tag "builtin" "internal"
  :custom ((kill-ring-max . 100)
           (kill-read-only-ok . t)
           (kill-whole-line . t)
           (eval-expression-print-length . nil)
           (eval-expression-print-level . nil)))

(leaf cus-start
  :doc "define customization properties of builtins"
  :tag "builtin" "internal"
  :config
  (defalias 'yes-or-no-p 'y-or-n-p))

;;</Pkg via leaf>---------------------------------------*




;;exportするための宣言
(provide 'init)


;----
; 3rd_PARTY
;----

;;clock
;(require 'sky-color-clock)
;(sky-color-clock-initialize 33) ; FUK, Japan
;(setq sky-color-clock-format "%H:%M")
;(push '(:eval (sky-color-clock)) (default-value 'mode-line-format))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-archives
   '(("org" . "https://orgmode.org/elpa/")
     ("melpa" . "https://melpa.org/packages/")
     ("gnu" . "https://elpa.gnu.org/packages/")))
 '(package-selected-packages '(leaf transient-dwim leaf-convert leaf-tree leaf-keywords)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
